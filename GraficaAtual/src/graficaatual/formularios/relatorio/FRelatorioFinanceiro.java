/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graficaatual.formularios.relatorio;

import graficaatual.daos.UsuariosDAO;
import graficaatual.daos.cadastro.AcabamentoDAO;
import graficaatual.daos.cadastro.CargoDAO;
import graficaatual.daos.cadastro.ClienteDAO;
import graficaatual.daos.cadastro.ColaboradorDAO;
import graficaatual.daos.cadastro.FornecedorDAO;
import graficaatual.daos.cadastro.TurnoDAO;
import graficaatual.daos.financeiro.BancoDAO;
import graficaatual.daos.financeiro.FormaDePagamentoDAO;
import graficaatual.daos.financeiro.LancamentoCaixaDAO;
import graficaatual.daos.financeiro.SangriaDAO;
import graficaatual.pesq.cadastro.CnvCadastroCliente;
import graficaatual.utilitarios.Data;
import graficaatual.utilitarios.ValidarValor;
import graficaatual.utilitarios.VisualizaRelatorio;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author si10
 */
public class FRelatorioFinanceiro extends javax.swing.JInternalFrame {

    // Tela
    private static int initControle;
    private int localIncusao;
    private static FRelatorioFinanceiro instance;
    private static FRelatorioFinanceiro instanceCont;

    //Controle de Navegação
    CnvCadastroCliente cnvClienteCad = new CnvCadastroCliente();
    private JFormattedTextField cpf;

    public FRelatorioFinanceiro() {

        initComponents();
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);

    }

    public static int isInicializado() {
        return initControle;
    }

    public synchronized static FRelatorioFinanceiro getInstance() {
        if (instance == null) {
            instance = new FRelatorioFinanceiro();
            initControle = 1;
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel10 = new javax.swing.JPanel();
        try {
            cpf = new JFormattedTextField(
                new MaskFormatter("###.###.###-##"));
            ((JFormattedTextField) cpf).setFocusLostBehavior(0);

        } catch (Exception e) {
        }
        jLabel2 = new javax.swing.JLabel();
        jCRelatorio = new javax.swing.JComboBox<>();
        imprimir = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        dataInicial = new javax.swing.JFormattedTextField();
        try{
            dataInicial = new JFormattedTextField(
                new MaskFormatter("##/##/####"));
            ((JFormattedTextField) dataInicial).setFocusLostBehavior(0);
        }catch(Exception e){}
        jLabel104 = new javax.swing.JLabel();
        jLabel105 = new javax.swing.JLabel();
        dataFinal = new javax.swing.JFormattedTextField();
        try{
            dataFinal = new JFormattedTextField(
                new MaskFormatter("##/##/####"));
            ((JFormattedTextField) dataFinal).setFocusLostBehavior(0);
        }catch(Exception e){}
        analitico = new javax.swing.JRadioButton();
        sintetico = new javax.swing.JRadioButton();

        setBorder(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Cliente");
        setMinimumSize(new java.awt.Dimension(1100, 700));
        setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1100, 700));
        getContentPane().setLayout(null);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setToolTipText("Cadastro de Pessoas");
        jPanel10.setMaximumSize(new java.awt.Dimension(999999, 999999));
        jPanel10.setMinimumSize(new java.awt.Dimension(1100, 700));
        jPanel10.setName(""); // NOI18N
        jPanel10.setPreferredSize(new java.awt.Dimension(1100, 700));
        jPanel10.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("RELATÓRIOS FINANCEIROS");
        jPanel10.add(jLabel2);
        jLabel2.setBounds(50, 0, 970, 70);

        jCRelatorio.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jCRelatorio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione o Cadastro", "Contas a Receber", "Contas a Pagar" }));
        jPanel10.add(jCRelatorio);
        jCRelatorio.setBounds(60, 90, 430, 30);

        imprimir.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir2.png"))); // NOI18N
        imprimir.setText("Imprimir");
        imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirActionPerformed(evt);
            }
        });
        jPanel10.add(imprimir);
        imprimir.setBounds(310, 320, 250, 40);

        sair.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/SAIR2.png"))); // NOI18N
        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        jPanel10.add(sair);
        sair.setBounds(560, 320, 250, 40);
        jPanel10.add(dataInicial);
        dataInicial.setBounds(60, 160, 100, 20);

        jLabel104.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel104.setText("Data Inicial");
        jPanel10.add(jLabel104);
        jLabel104.setBounds(60, 140, 100, 20);

        jLabel105.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel105.setText("Data Final");
        jPanel10.add(jLabel105);
        jLabel105.setBounds(170, 140, 100, 20);
        jPanel10.add(dataFinal);
        dataFinal.setBounds(170, 160, 120, 20);

        buttonGroup1.add(analitico);
        analitico.setSelected(true);
        analitico.setText("Analítico");
        analitico.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                analiticoAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        analitico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analiticoActionPerformed(evt);
            }
        });
        jPanel10.add(analitico);
        analitico.setBounds(300, 160, 93, 23);

        buttonGroup1.add(sintetico);
        sintetico.setText("Sintético");
        jPanel10.add(sintetico);
        sintetico.setBounds(400, 160, 90, 23);

        getContentPane().add(jPanel10);
        jPanel10.setBounds(0, 0, 1100, 700);
        jPanel10.getAccessibleContext().setAccessibleName("Cadastro de Pessoas");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirActionPerformed
        try {
            imprimir();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_imprimirActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        limparTela();
        dispose();
    }//GEN-LAST:event_sairActionPerformed

    private void analiticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analiticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analiticoActionPerformed

    private void analiticoAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_analiticoAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_analiticoAncestorMoved

    private void limparTela() {

        jCRelatorio.setSelectedIndex(0);
        dataInicial.setText("");
        dataFinal.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton analitico;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFormattedTextField dataFinal;
    private javax.swing.JFormattedTextField dataInicial;
    private javax.swing.JButton imprimir;
    private javax.swing.JComboBox<String> jCRelatorio;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JButton sair;
    private javax.swing.JRadioButton sintetico;
    // End of variables declaration//GEN-END:variables

    private void imprimir() throws Exception {
        try {

            String sql = "";
            switch (jCRelatorio.getSelectedIndex()) {
                //Ordem     
                //1-Receber 2-Pagar
                case 1:

                    if (analitico.isSelected()) {

                        sql = " SELECT c.codcontasrec, c.valorreceber, c.valorrecebido, p.nome, f.codforma, f.descricao as forma "
                                + " FROM contasareceber c"
                                + " INNER JOIN cliente cli ON cli.codcliente = c.cliente "
                                + " INNER JOIN pessoa p ON p.codpessoa = cli.pessoa "
                                + " INNER JOIN formadepagamento f ON f.codforma = c.formapagamento "
                                + " WHERE c.dataprevista BETWEEN '" + Data.getDateConvertFormat(dataInicial.getText(), Data.FORMAT_DATA) + "' AND '" + Data.getDateConvertFormat(dataFinal.getText(), Data.FORMAT_DATA) + "' "
                                + " ORDER BY p.nome asc";

                        new VisualizaRelatorio().visRel("graficaatual/relatorios/arquivos/RelContasReceberAgrupamento.jasper", "RELATÓRIO DE CONTAS A RECEBER DETALHADO", null, sql);

                    } else if (sintetico.isSelected()) {
                        sql = " SELECT c.codcontasrec, c.valorreceber, c.valorrecebido, p.nome, f.descricao as forma "
                                + " FROM contasareceber c"
                                + " INNER JOIN cliente cli ON cli.codcliente = c.cliente "
                                + " INNER JOIN pessoa p ON p.codpessoa = cli.pessoa "
                                + " INNER JOIN formadepagamento f ON f.codforma = c.formapagamento "
                                + " WHERE c.dataprevista BETWEEN '" + Data.getDateConvertFormat(dataInicial.getText(), Data.FORMAT_DATA) + "' AND '" + Data.getDateConvertFormat(dataFinal.getText(), Data.FORMAT_DATA) + "' "
                                + " ORDER BY p.nome asc";

                        new VisualizaRelatorio().visRel("graficaatual/relatorios/arquivos/RelContasReceberLista.jasper", "RELATÓRIO DE CONTAS A RECEBER LISTA", null, sql);

                    } else {

                    }

                    break;
                case 2:

                    if (analitico.isSelected()) {

                        sql = " SELECT c.codcontaspag, c.valorpagar, p.nome, f.codforma, f.descricao as forma  "
                                + " FROM contasapagar c "
                                + " INNER JOIN fornecedor fornec ON fornec.codfornecedor = c.fornecedor "
                                + " INNER JOIN pessoa p ON p.codpessoa = fornec.pessoa "
                                + " INNER JOIN formadepagamento f ON f.codforma = c.formapagamento "
                                + " WHERE c.dataprevista BETWEEN '" + Data.getDateConvertFormat(dataInicial.getText(), Data.FORMAT_DATA) + "' AND '" + Data.getDateConvertFormat(dataFinal.getText(), Data.FORMAT_DATA) + "' "
                                + " ORDER BY p.nome asc";

                        new VisualizaRelatorio().visRel("graficaatual/relatorios/arquivos/RelContasPagarAgrupamento.jasper", "RELATÓRIO DE CONTAS A PAGAR DETALHADO", null, sql);

                    } else if (sintetico.isSelected()) {
                        sql = " SELECT c.codcontaspag, c.valorpagar, p.nome, f.descricao as forma "
                                + " FROM contasapagar c "
                                + " INNER JOIN fornecedor fornec ON fornec.codfornecedor = c.fornecedor "
                                + " INNER JOIN pessoa p ON p.codpessoa = fornec.pessoa "
                                + " INNER JOIN formadepagamento f ON f.codforma = c.formapagamento "
                                + " WHERE c.dataprevista BETWEEN '" + Data.getDateConvertFormat(dataInicial.getText(), Data.FORMAT_DATA) + "' AND '" + Data.getDateConvertFormat(dataFinal.getText(), Data.FORMAT_DATA) + "' "
                                + " ORDER BY p.nome asc";

                        new VisualizaRelatorio().visRel("graficaatual/relatorios/arquivos/RelContasPagarLista.jasper", "RELATÓRIO DE CONTAS A PAGAR LISTA", null, sql);

                    } else {

                    }

                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Relatório Vázio");
                    break;

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar relatório de bancos! \n " + e);
        }

    }

}
