/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graficaatual.formularios.producao;

import graficaatual.daos.financeiro.CaixaDAO;
import graficaatual.daos.financeiro.ContasAReceberDAO;
import graficaatual.daos.financeiro.PlanoDeContasDAO;
import graficaatual.daos.producao.OrdemServicoDAO;
import graficaatual.daos.relatorio.TextoPadraoDAO;
import graficaatual.entidades.ControleAcesso;
import graficaatual.entidades.financeiro.Caixa;
import graficaatual.entidades.financeiro.ContasAReceber;
import graficaatual.entidades.financeiro.FormaDePagamento;
import graficaatual.entidades.financeiro.PlanoDeContas;
import graficaatual.entidades.pedido.Orcamento;
import graficaatual.entidades.producao.AnexoDTO;
import graficaatual.entidades.producao.EquipeEntrega;
import graficaatual.entidades.producao.OrdemServico;
import graficaatual.utilitarios.Conexao;
import graficaatual.utilitarios.Data;
import graficaatual.utilitarios.Persistencia;
import graficaatual.utilitarios.ValidarValor;
import graficaatual.utilitarios.VisualizaRelatorio;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;
import javax.persistence.EntityManager;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author si10
 */
public class FOrdemFaturamento extends javax.swing.JInternalFrame {

    // Tela
    private static int initControle;
    private int localIncusao;
    private static FOrdemFaturamento instance;

    //Entidades para trabalhar
    private OrdemServico ordem = null;
    private OrdemServicoDAO ordemDao = new OrdemServicoDAO();
    private Caixa caixa = null;
    private CaixaDAO caixaDao = new CaixaDAO();

    private JFormattedTextField cpf;

    public FOrdemFaturamento() {
        initComponents();
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        salvar.setEnabled(true);
        carregaComboCaixa();
        pesquisarFazer();
        pesquisarConcluido();

    }

    public static int isInicializado() {
        return initControle;
    }

    public synchronized static FOrdemFaturamento getInstance() {
        if (instance == null) {
            instance = new FOrdemFaturamento();
            initControle = 1;
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel10 = new javax.swing.JPanel();
        try {
            cpf = new JFormattedTextField(
                new MaskFormatter("###.###.###-##"));
            ((JFormattedTextField) cpf).setFocusLostBehavior(0);

        } catch (Exception e) {
        }
        jLabel2 = new javax.swing.JLabel();
        salvar = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        jCBCaixa = new javax.swing.JComboBox<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabOrdensFazer = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabConcluido = new javax.swing.JTable();
        jLSelecao = new javax.swing.JLabel();
        atualizar = new javax.swing.JButton();
        refazer1 = new javax.swing.JButton();

        setBorder(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Faturamento");
        setMinimumSize(new java.awt.Dimension(1100, 700));
        setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1100, 700));
        getContentPane().setLayout(null);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setToolTipText("Cadastro de Pessoas");
        jPanel10.setMaximumSize(new java.awt.Dimension(999999, 999999));
        jPanel10.setMinimumSize(new java.awt.Dimension(1100, 700));
        jPanel10.setName(""); // NOI18N
        jPanel10.setPreferredSize(new java.awt.Dimension(1100, 700));
        jPanel10.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("FATURAMENTO");
        jPanel10.add(jLabel2);
        jLabel2.setBounds(0, 0, 1030, 70);

        salvar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/material2.png"))); // NOI18N
        salvar.setText("Finalizar");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });
        jPanel10.add(salvar);
        salvar.setBounds(690, 80, 190, 40);

        sair.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/SAIR2.png"))); // NOI18N
        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        jPanel10.add(sair);
        sair.setBounds(490, 620, 130, 40);

        jCBCaixa.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jCBCaixa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolha um Caixa" }));
        jCBCaixa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBCaixaItemStateChanged(evt);
            }
        });
        jPanel10.add(jCBCaixa);
        jCBCaixa.setBounds(40, 80, 430, 40);

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jScrollPane6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        tabOrdensFazer.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tabOrdensFazer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ordem Serviço", "Pedido (cód.)", "Descrição", "Cliente", "Data Entrega", "Forma De Pag.", "Caixa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabOrdensFazer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabOrdensFazerMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tabOrdensFazer);

        jTabbedPane1.addTab("A Faturar", jScrollPane6);

        jPanel1.setLayout(null);

        jScrollPane7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        tabConcluido.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tabConcluido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ordem Serviço", "Pedido (cód.)", "Descrição", "Cliente", "Data Entrega", "Forma Pagamento", "Caixa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabConcluido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabConcluidoMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tabConcluido);

        jPanel1.add(jScrollPane7);
        jScrollPane7.setBounds(0, 0, 1000, 510);

        jTabbedPane1.addTab("Faturados", jPanel1);

        jPanel10.add(jTabbedPane1);
        jTabbedPane1.setBounds(40, 140, 1000, 470);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Faturados");

        jLSelecao.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel10.add(jLSelecao);
        jLSelecao.setBounds(40, 120, 1000, 20);

        atualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        atualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/turno2.png"))); // NOI18N
        atualizar.setText("Atualizar");
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });
        jPanel10.add(atualizar);
        atualizar.setBounds(880, 80, 160, 40);

        refazer1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        refazer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ADICIONAR2.png"))); // NOI18N
        refazer1.setText("Escolher Caixa");
        refazer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refazer1ActionPerformed(evt);
            }
        });
        jPanel10.add(refazer1);
        refazer1.setBounds(470, 80, 220, 40);

        getContentPane().add(jPanel10);
        jPanel10.setBounds(0, 0, 1100, 700);
        jPanel10.getAccessibleContext().setAccessibleName("Cadastro de Pessoas");

        getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        EntityManager session = Persistencia.getInstance().getSessionComBegin();

        try {
            ordem = ordemDao.get((Integer) tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 0));

            if (ordem != null) {

                if (maisItens()) {
                    if (ordem.getCaixa() != null) {
                        gerarContasAReceber(session);
                        salvarOrdem(session);
                        jLSelecao.setText("");

                        session.getTransaction().commit();
                        session.close();
                        pesquisarFazer();
                        pesquisarConcluido();
                        if (ordem.getOrcamento().getCliente().getPessoa().getEmail() != null) {
                            enviarEmail();
                        }
                        JOptionPane.showMessageDialog(this, " Tarefa Finalizada com Sucesso! ");
                    } else {
                        throw new Exception(" Não foi selecionado Caixa para esse Faturamento. ");
                    }

                } else {
                    throw new Exception(" Item não Pode ser faturado, itens do Pedido não finalizado.");
                }

            } else {
                throw new Exception(" Selecione uma Ordem de Serviço");
            }
        } catch (Exception e) {
            session.getTransaction().rollback();
            session.close();
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_salvarActionPerformed

    private boolean maisItens() {
        //Busca todos os itens do Orçamento
        List<OrdemServico> listItens = ordemDao.getListByOrcamento(ordem.getOrcamento().getCodOrcamento());
        //Confere se a lista existe
        if (listItens != null && !listItens.isEmpty()) {
            //Se Lista só tem um OK
            if (listItens.size() <= 1) {
                return true;
            } else {
                boolean aux = true;
                //Case tem mais de 1 confere - se todos estão OK
                for (OrdemServico ord : listItens) {
                    if (!ord.getCheckFaturamento()) {
                        aux = false;
                    }
                }
                if (aux) {
                    return true;
                } else {
                    return false;
                }

            }

        } else {
            return false;
        }

    }

    private void salvarOrdem(EntityManager session) throws Exception {
        ordem = new OrdemServicoDAO().get((Integer) tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 0));

        if (ordem != null) {

            if (ordem.getCaixa() != null) {

                List<OrdemServico> listItens = ordemDao.getListByOrcamento(ordem.getOrcamento().getCodOrcamento());
                if (listItens != null && !listItens.isEmpty()) {

                    for (OrdemServico ord : listItens) {

                        ord.setDataFimFaturamento(new Date());
                        ord.setUsuarioFimFaturamento(ControleAcesso.usuario.getCodUsuario() + "-" + ControleAcesso.usuario.getLogin());
                        ord = ordemDao.addOrdem(session, ord);

                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, " Selecione um Caixa. ");
            }
        } else {
            JOptionPane.showMessageDialog(this, " Escolha uma Ordem de seviço, selecionando com um click.");
        }
    }


    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        dispose();
    }//GEN-LAST:event_sairActionPerformed

    private void tabOrdensFazerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabOrdensFazerMouseClicked
        try {
            jLSelecao.setText(" Ordem de Serviço Selecionada: " + tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 0)
                    + " Pedido - " + tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 1)
                    + " Produto - " + tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 2)
                    + " Pedido - " + tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 3));
            if (evt.getClickCount() > 1) {
                imprimir((Integer) tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 1));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar Orçamento! \n " + e);
        }
    }//GEN-LAST:event_tabOrdensFazerMouseClicked

    private void tabConcluidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabConcluidoMouseClicked
        try {
            jLSelecao.setText(" Ordem de Serviço Selecionada: " + tabConcluido.getValueAt(tabConcluido.getSelectedRow(), 0)
                    + " Pedido - " + tabConcluido.getValueAt(tabConcluido.getSelectedRow(), 1)
                    + " Produto - " + tabConcluido.getValueAt(tabConcluido.getSelectedRow(), 2)
                    + " Pedido - " + tabConcluido.getValueAt(tabConcluido.getSelectedRow(), 3));
            if (evt.getClickCount() > 1) {
                imprimir((Integer) tabConcluido.getValueAt(tabConcluido.getSelectedRow(), 1));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar Orçamento! \n " + e);
        }
    }//GEN-LAST:event_tabConcluidoMouseClicked

    private void jCBCaixaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBCaixaItemStateChanged
        try {
            pesquisarFazer();
            pesquisarConcluido();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jCBCaixaItemStateChanged

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        if (jTabbedPane1.getSelectedIndex() == 0) {
            salvar.setEnabled(true);
        } else {
            salvar.setEnabled(false);
        }
        pesquisarFazer();
        pesquisarConcluido();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed
        try {
            pesquisarFazer();
            pesquisarConcluido();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro :" + e.getMessage());
        }
    }//GEN-LAST:event_atualizarActionPerformed

    private void jCBEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBEquipeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBEquipeActionPerformed

    private void refazer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refazer1ActionPerformed
        try {
            ordem = new OrdemServicoDAO().get((Integer) tabOrdensFazer.getValueAt(tabOrdensFazer.getSelectedRow(), 0));
            if (ordem != null) {
                if (jCBCaixa.getSelectedIndex() != 0) {
                    String[] setor = jCBCaixa.getSelectedItem().toString().split(" - ");
                    int codEquipe = ValidarValor.getInt(setor[0]);
                    caixa = caixaDao.get(codEquipe);
                    if (caixa != null) {
                        ordem.setCaixa(caixa);
                        ordem = ordemDao.addOrdem(ordem);
                        pesquisarFazer();
                        pesquisarConcluido();
                    } else {
                        throw new Exception(" Caixa não encontrada!");
                    }
                } else {
                    throw new Exception(" Selecione um Caixa! ");
                }

            } else {
                throw new Exception(" Selecione uma Ordem de Serviço! ");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }//GEN-LAST:event_refazer1ActionPerformed

    public static void removeLinhas(JTable table) {
        int n = table.getRowCount();

        DefaultTableModel model = (DefaultTableModel) table.getModel();

        for (int i = n - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atualizar;
    private javax.swing.JComboBox<String> jCBCaixa;
    private javax.swing.JLabel jLSelecao;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton refazer1;
    private javax.swing.JButton sair;
    private javax.swing.JButton salvar;
    private javax.swing.JTable tabConcluido;
    private javax.swing.JTable tabOrdensFazer;
    // End of variables declaration//GEN-END:variables

    private void imprimir(Integer valor) throws Exception {
        try {

            String sql = "select cli.codcliente, pes.nome, pes.cnpj, pes.inscestadual, pes.numcasa, pes.uf, pes.cep,pes.email, pes.telefone,"
                    + " log.descricao logradouro, bai.descricao bairro, cid.descricao cidade, "
                    + " orc.clientesecundario, orc.codorcamento,orc.dataorcamento, orc.validadeorcamento, orc.prazoentrega, orc.formapagamento, orc.clientesecundario, "
                    + " orc.enderecosecundario, orc.telefonesecundario, orc.tipodeentrega, "
                    + " prod.codproduto, prod.descricao produto,item.quantprod, item.medida, item.unidade, item.valortotalproduto, item.valorunitario,aca.descricao acabamento, orc.valortotal,"
                    + " case when orc.situacao = true then 'PEDIDO' "
                    + " ELSE 'ORÇAMENTO' end nomeRell "
                    + " FROM orcamento orc "
                    + " INNER JOIN cliente cli ON cli.codcliente = orc.cliente "
                    + " INNER JOIN pessoa pes ON pes.codPessoa = cli.pessoa "
                    + " INNER JOIN itemorcamento item ON item.orcamento = orc.codOrcamento "
                    + " LEFT JOIN logradouro log ON log.codlogradouro = pes.logradouro "
                    + " LEFT JOIN bairro bai ON bai.codbairro = pes.bairro "
                    + " LEFT JOIN cidade cid ON cid.codcidade = pes.cidade "
                    + " LEFT JOIN produto prod ON prod.codproduto = item.produto"
                    + " LEFT JOIN acabamento aca ON aca.codacabamento = item.acabamento"
                    + " WHERE orc.codOrcamento = " + valor;

            Map tx = new HashMap();

            tx.put("TEXTOPADRAO", new TextoPadraoDAO().get(1).getTextoOrcamento());
            new VisualizaRelatorio().visRel("graficaatual/relatorios/arquivos/RelOrcamento.jasper", "Orçamento/Pedido", tx, sql);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar Orçamento! \n " + e);
        }
    }

    private void pesquisarFazer() {
        DefaultTableModel model = (DefaultTableModel) tabOrdensFazer.getModel();
        Statement bancoConsulta = null;
        Connection conexao = null;
        removeLinhas(tabOrdensFazer);

        try {
            conexao = Conexao.getConexao();
            bancoConsulta = Conexao.getBanco(conexao);

            String pesq = getSetor(0);

            String sql = getSql();
            sql = sql + pesq
                    + " order by orc.prazoentrega , orc.codorcamento ";
            //System.out.println(" vvvvvv "+sql);
            ResultSet rs = bancoConsulta.executeQuery(sql);
            while (rs.next()) {
                Object[] o = new Object[]{
                    rs.getInt("codordemservico"),
                    rs.getInt("codorcamento"),
                    rs.getString("descricao"),
                    rs.getString("nome"),
                    Data.getDateParse(rs.getDate("prazoentrega"), Data.FORMAT_DATA_BR),
                    rs.getString("forma"),
                    rs.getString("caixa")
                };
                model.addRow(o);

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (bancoConsulta != null) {
                    bancoConsulta.close();
                }
                if (conexao != null) {
                    conexao.close();
                }
            } catch (Exception ex) {
            }
        }
    }

    private void pesquisarConcluido() {

        DefaultTableModel model = (DefaultTableModel) tabConcluido.getModel();
        Statement bancoConsulta = null;
        Connection conexao = null;
        removeLinhas(tabConcluido);

        try {
            conexao = Conexao.getConexao();
            bancoConsulta = Conexao.getBanco(conexao);

            String pesq = getSetor(1);

            String sql = getSql();
            sql = sql + pesq
                    + " order by orc.prazoentrega , orc.codorcamento ";
            System.out.println(" uuuuuuuuuuuu " + sql);
            ResultSet rs = bancoConsulta.executeQuery(sql);
            while (rs.next()) {
                Object[] o = new Object[]{
                    rs.getInt("codordemservico"),
                    rs.getInt("codorcamento"),
                    rs.getString("descricao"),
                    rs.getString("nome"),
                    Data.getDateParse(rs.getDate("prazoentrega"), Data.FORMAT_DATA_BR),
                    rs.getString("forma"),
                    rs.getString("caixa")
                };
                model.addRow(o);

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (bancoConsulta != null) {
                    bancoConsulta.close();
                }
                if (conexao != null) {
                    conexao.close();
                }
            } catch (Exception ex) {
            }
        }
    }

    private String getSetor(int tipo) {

        String aux = "";

        // tipo 0 - a fazer
        // tipo 1 - concluida
        if (tipo == 1) {
            aux = " not ";
        }

        String ret = " ord.checkFaturamento and  ord.dataFimFaturamento is " + aux + " null";

        return ret;
    }

    private String getSql() {
        return " select ord.codordemservico as  codordemservico,"
                + " orc.codorcamento as codorcamento , "
                + " prod.descricao as descricao , "
                + " (pes.cnpj || ' ' || pes.nome) as nome , "
                + " orc.prazoentrega  as prazoentrega,"
                + " orc.formaPagamento || ' ' || forma.descricao as forma,"
                + " case when ord.caixa is null then '' else ord.caixa || ' ' || caixa.descricao end caixa"
                + " from ordemservico as ord "
                + " inner join orcamento as orc on (orc.codorcamento = ord.orcamento )"
                + " left join produto as prod on (ord.produto = prod.codproduto)"
                + " left join cliente as cli on (cli.codcliente = orc.cliente)"
                + " left join pessoa as pes on (cli.pessoa = pes.codpessoa)"
                + " left join formaDePagamento as forma on (orc.formaPagamento = forma.codForma)"
                + " left join caixa as caixa on (caixa.codcaixa = ord.caixa)"
                + " where ";
    }

    private boolean enviarEmail() throws Exception {
        List<String> para = new ArrayList<String>();
        
        String de = "danilo.alfenas@gmail.com";
        para.add(ordem.getOrcamento().getCliente().getPessoa().getEmail());
        String deNome = "Gráfica Atual - Sistema de Atendimento";
        //Conferir Senha
        String senha = "251118Dfernandesb";
        String assunto = " Faturamento - Concluído ";
        String msg;

        msg = " <p>Prezado " + ordem.getOrcamento().getCliente().getPessoa().getNome() + ","
                + " <br/> O Produto: " + ordem.getOrcamento().getProduto().getDescricao() + " , "
                + " do Seu edido. ";

        System.out.println("--------------- Chegou ao final do processo ---------------");

        return sendEmailAnexos(de, deNome, senha, assunto, msg, null, null, para.toArray(new String[para.size()]));

    }

    public static boolean sendEmailAnexos(String from, String fromName, String pass, String assunto, String msg,
            List<AnexoDTO> anexos, String nomeAnexo, String to[]) {
        if (to == null || to.length < 1 || to[0].trim().length() < 5) {
            return false;
        }
        String host = "";
        Properties props = System.getProperties();

        props.put("mail.smtp.starttls.enable", "false");
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.user", from);
        props.put("mail.smtp.password", pass);
        props.put("mail.smtp.port", 587);
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.ssl.trust", host);

        Session session = Session.getInstance(props, null);

        MimeMessage mimeMsg = new MimeMessage(session);

        MimeBodyPart mimeBP = new MimeBodyPart();
        MimeMultipart multipart = new MimeMultipart();
        try {
            mimeMsg.setFrom(new InternetAddress(from, fromName));

            InternetAddress[] toAddress = new InternetAddress[to.length];

            for (int i = 0; i < to.length; i++) {

                toAddress[i] = new InternetAddress(to[i]);

            }

            mimeMsg.setRecipients(Message.RecipientType.TO, toAddress);
            mimeMsg.setSubject(assunto);

            mimeBP.setContent(msg, "text/html; charset=UTF-8");

            multipart.addBodyPart(mimeBP);

            System.out.println("msg: " + msg);
            //Anexando arquivos /
            if (anexos != null) {
                for (AnexoDTO adto : anexos) {
                    mimeBP = new MimeBodyPart();
                    ByteArrayDataSource byteDS = new ByteArrayDataSource(adto.getConteudo(), adto.getMimeType());
                    mimeBP.setDataHandler(new DataHandler(byteDS));
                    mimeBP.setFileName(adto.getNome());
                    multipart.addBodyPart(mimeBP);
                }

                mimeMsg.setContent(multipart);

                System.out.println("anexos: " + anexos);
                System.out.println("mimeMsg.getAllRecipients() " + mimeMsg.getAllRecipients());
                System.out.println("mimeMsg: " + mimeMsg.toString());

                Transport transp = session.getTransport("smtp");
                transp.connect(host, from, pass);
                transp.sendMessage(mimeMsg, mimeMsg.getAllRecipients());
                transp.close();

                return true;
            } else {
                return true;
            }

        } catch (Exception ex) {
            //Logger.getLogger(UtEmailSender.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
            return false;
        }
    }

    private void carregaComboCaixa() {
        List<Caixa> listaCaixa = caixaDao.getList();
        if (listaCaixa != null && !listaCaixa.isEmpty()) {
            for (Caixa c : listaCaixa) {
                jCBCaixa.addItem(c.getCodCaixa() + " - " + c.getDescricao());
            }
        }
    }

    private void gerarContasAReceber(EntityManager session) throws Exception {
        Orcamento orc = ordem.getOrcamento();
        FormaDePagamento forma = orc.getFormaPagamento();
        ContasAReceberDAO receberDao = new ContasAReceberDAO();
        ContasAReceber receber = null;

        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());

        Double valorJaUsado = 0.0;
        Double valorJaUsadoEntrada = 0.0;
        Double totalSemEntrada = 0.0;
        if (forma != null) {
            if (forma.getQuantParcelas() > 0) {
                for (int i = 1; forma.getQuantParcelas() >= i; i++) {
                    receber = new ContasAReceber();
                    cal.setTime(new Date());

                    receber.setCaixa(ordem.getCaixa());
                    receber.setCliente(orc.getCliente());
                    receber.setPlanoContas(new PlanoDeContasDAO().get(1));//Sempre vai ser como vendas -1
                    receber.setFormaPagamento(orc.getFormaPagamento());
                    receber.setDataCadastro(new Date());
                   // receber.setDescricao(" Faturamento Pedido:" + ordem.getOrcamento().getCodOrcamento() + " " + ordem.getOrcamento().getCliente().getPessoa().getNome());
                    receber.setObservacao(" Faturamento Pedido:" + ordem.getOrcamento().getCodOrcamento() + " " + ordem.getOrcamento().getCliente().getPessoa().getNome());
                    receber.setUsuarioCadastro(ControleAcesso.usuario.getColaborador().getPessoa().getCodPessoa() + " - " + ControleAcesso.usuario.getColaborador().getPessoa().getNome());
                    receber.setDataPagamento(null);
                    receber.setOrcamento(orc);
                    // Verifica Entrada 
                    if (i == 1) {
                        if (forma.isEntrada()) {
                            cal.add(Calendar.DATE, 1);
                            receber.setDataPrevista(cal.getTime());
                        } else {
                            cal.add(Calendar.DATE, forma.getDiasIntervalo());
                            receber.setDataPrevista(cal.getTime());
                        }
                        if (forma.isVlrEspecial()) {
                            valorJaUsado = ValidarValor.getArredondamento(orc.getValorTotal() * (forma.getPercentEspecial() / 100), ValidarValor.Tipo.ArredondamentoParaCima);
                            valorJaUsadoEntrada = ValidarValor.getArredondamento(orc.getValorTotal() * (forma.getPercentEspecial() / 100), ValidarValor.Tipo.ArredondamentoParaCima);
                            totalSemEntrada = orc.getValorTotal() - valorJaUsadoEntrada;
                            receber.setValorReceber(ValidarValor.getArredondamento(orc.getValorTotal() * (forma.getPercentEspecial() / 100), ValidarValor.Tipo.ArredondamentoParaCima));
                        } else {
                            valorJaUsado = ValidarValor.getArredondamento(orc.getValorTotal() / forma.getQuantParcelas(), ValidarValor.Tipo.ArredondamentoParaCima);
                            valorJaUsadoEntrada = ValidarValor.getArredondamento(orc.getValorTotal() / forma.getQuantParcelas(), ValidarValor.Tipo.ArredondamentoParaCima);
                            totalSemEntrada = orc.getValorTotal() - valorJaUsadoEntrada;
                            receber.setValorReceber(ValidarValor.getArredondamento(orc.getValorTotal() / forma.getQuantParcelas(), ValidarValor.Tipo.ArredondamentoParaCima));
                        }
                    } else {

                        if (forma.isEntrada()) {
                            cal.add(Calendar.DATE, (forma.getDiasIntervalo() * (i - 1)));
                        } else {
                            cal.add(Calendar.DATE, (forma.getDiasIntervalo() * i));
                        }
                        receber.setDataPrevista(cal.getTime());
                        //Verifica se é ultima parcela para realizar o arredondamento
                        if (i == forma.getQuantParcelas()) {
                            receber.setValorReceber((orc.getValorTotal() - valorJaUsado));
                        } else {
                            if (forma.isVlrEspecial()) {
                                valorJaUsado = valorJaUsado + ValidarValor.getArredondamento(totalSemEntrada / (forma.getQuantParcelas() - 1), ValidarValor.Tipo.ArredondamentoParaCima);
                                receber.setValorReceber(ValidarValor.getArredondamento(totalSemEntrada / (forma.getQuantParcelas() - 1), ValidarValor.Tipo.ArredondamentoParaCima));
                            } else {
                                valorJaUsado = valorJaUsado + ValidarValor.getArredondamento(orc.getValorTotal() / (forma.getQuantParcelas()), ValidarValor.Tipo.ArredondamentoParaCima);
                                receber.setValorReceber(ValidarValor.getArredondamento(orc.getValorTotal() / (forma.getQuantParcelas()), ValidarValor.Tipo.ArredondamentoParaCima));
                            }
                        }

                    }
                    receber = receberDao.salvar(session, receber);

                    System.out.println("codContaReceber-------" + receber.getCodContasRec());
                }
            } else {
                throw new Exception(" Sem Parcela na forma de Pagamento");
            }
        } else {
            throw new Exception(" Sem forma de Pagamento");
        }

    }

}
